name: Add PR labels
description: Add labels to pull request

inputs:
  token:
    description: GitHub token to use for the API call
    required: true
  types:
    description: Valid commit types (JSON array)
  scopes:
    description: Valid commit scopes (JSON array)

runs:
  using: composite
  steps:
    - name: Set inputs
      env:
        token: ${{ inputs.token }}
        types: ${{ inputs.types || '["chore", "deps", "docs", "feat", "fix", "perf", "refactor", "release", "revert", "style", "test"]' }}
        scopes: ${{ inputs.scopes || '["actions", "dev", "lock", "prod", "security"]' }}
      run: |
        {
          echo "INPUT_TOKEN=${{ env.token }}"
          echo 'INPUT_TYPES=${{ env.types }}'
          echo 'INPUT_SCOPES=${{ env.scopes }}'
        } >> $GITHUB_ENV
      shell: bash

    - name: Add labels
      if: github.event.action == 'opened' || github.event.action == 'edited'
      uses: actions/github-script@v7.0.1
      with:
        github-token: ${{ env.INPUT_TOKEN }}
        script: |
          const types = JSON.parse(core.getInput('types', { required: true }));
          const scopes = JSON.parse(core.getInput('scopes', { required: true }));

          const {title} = context.payload.pull_request;

          const type = types.find(type => title.startsWith(`${type}:`) || title.startsWith(`${type}!:`) || title.startsWith(`${type}(`));
          const scope = scopes.find(scope => title.includes(`(${scope}):`) || title.includes(`(${scope})!:`));

          const typeLabel = type ? `type: ${type}` : null;
          const scopeLabel = scope ? `scope: ${scope}` : null;

          const labels = [typeLabel, scopeLabel].filter(Boolean);

          if (labels.length > 0) {
            github.rest.issues.addLabels({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels
            });
          }
        types: ${{ env.INPUT_TYPES }}
        scopes: ${{ env.INPUT_SCOPES }}
