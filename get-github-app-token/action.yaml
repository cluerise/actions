name: Get GH app token
description: Get GitHub app token

inputs:
  app-id:
    description: GitHub app ID
    required: true
  app-private-key:
    description: GitHub app private key
    required: true

outputs:
  token:
    description: GitHub app installation access token
    value: ${{ steps.get-token.outputs.token }}

runs:
  using: composite
  steps:
    - name: Set inputs
      env:
        INPUT_APP_ID: ${{ inputs.app-id }}
        INPUT_APP_PRIVATE_KEY: ${{ inputs.app-private-key }}
      run: |
        {
          echo "INPUT_APP_ID=$INPUT_APP_ID"
          echo "INPUT_APP_PRIVATE_KEY<<EOF_APP_PRIVATE_KEY"
          echo "$INPUT_APP_PRIVATE_KEY"
          echo "EOF_APP_PRIVATE_KEY"
        } >> $GITHUB_ENV
      shell: bash

    - name: Install Octokit
      run: npm install octokit && npm pkg set type=module
      shell: bash

    - name: Get token
      id: get-token
      uses: actions/github-script@v8.0.0
      with:
        script: |
          const { App, Octokit } = await import('${{ github.workspace }}/node_modules/octokit/dist-bundle/index.js');

          const app = new App({
            appId: core.getInput('app-id', { required: true }),
            privateKey: core.getInput('app-private-key', { required: true }),
            Octokit: Octokit.defaults({
              request: {
                fetch
              }
            })
          });

          const installation = await app.octokit.rest.apps.getRepoInstallation({
            owner: context.repo.owner,
            repo: context.repo.repo
          });

          const installationAccessToken = await app.octokit.rest.apps.createInstallationAccessToken({
            installation_id: installation.data.id
          });

          const accessToken = installationAccessToken.data.token;

          core.setSecret(accessToken);
          core.setOutput('token', accessToken);
        app-id: ${{ env.INPUT_APP_ID }}
        app-private-key: ${{ env.INPUT_APP_PRIVATE_KEY }}
