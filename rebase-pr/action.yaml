name: Rebase PR
description: Rebase a pull request branch

inputs:
  token:
    description: GitHub token to use for the API call
    required: true
  pr-id:
    description: ID of the pull request to rebase
    required: false
  squash:
    description: Whether to squash the commits in the pull request
    required: false

runs:
  using: composite
  steps:
    - name: Set inputs
      env:
        token: ${{ inputs.token }}
        pr-id: ${{ inputs.pr-id || github.event.issue.node_id }}
        squash: ${{ inputs.squash || false }}
      run: |
        {
          echo "INPUT_TOKEN=${{ env.token }}"
          echo "INPUT_PR_ID=${{ env.pr-id }}"
          echo "INPUT_SQUASH=${{ env.squash }}"
        } >> $GITHUB_ENV
      shell: bash

    - name: Get PR info
      id: get-pr-info
      uses: octokit/graphql-action@v2.3.2
      with:
        token: ${{ env.INPUT_TOKEN }}
        query: |
          query GetPullRequestInfo($id: ID!) {
            node(id: $id) {
              ... on PullRequest {
                title
                baseRefName
                headRef {
                  id
                  name
                }
                commits {
                  totalCount
                }
              }
            }
          }
        id: ${{ env.INPUT_PR_ID }}

    - name: Set squash strategy
      if: ${{ env.INPUT_SQUASH == 'true' || fromJson(steps.get-pr-info.outputs.data).node.commits.totalCount == 1 }}
      run: echo "STRATEGY=squash" >> $GITHUB_ENV
      shell: bash

    - name: Set rebase strategy
      if: ${{ env.INPUT_SQUASH == 'false' && fromJson(steps.get-pr-info.outputs.data).node.commits.totalCount > 1 }}
      run: echo "STRATEGY=rebase" >> $GITHUB_ENV
      shell: bash

    - name: Rebase remote branch with multiple commits
      if: ${{ env.STRATEGY == 'rebase' }}
      uses: octokit/graphql-action@v2.3.2
      with:
        token: ${{ env.INPUT_TOKEN }}
        query: |
          mutation RebasePullRequest($id: ID!) {
            updatePullRequestBranch(input: {
              pullRequestId: $id,
              updateMethod: REBASE
            }) {
              clientMutationId
            }
          }
        id: ${{ env.INPUT_PR_ID }}

    - name: Checkout
      if: ${{ env.STRATEGY == 'squash' }}
      uses: actions/checkout@v4.2.2
      with:
        ref: ${{ fromJson(steps.get-pr-info.outputs.data).node.headRef.name }}
        fetch-depth: 0

    - name: Rebase local branch
      if: ${{ env.STRATEGY == 'squash' }}
      run: |
        git config user.name "GitHub Action" &&
        git config user.email "action@github.com" &&
        git rebase origin/${{ fromJson(steps.get-pr-info.outputs.data).node.baseRefName }} &&
        git reset origin/${{ fromJson(steps.get-pr-info.outputs.data).node.baseRefName }}
      shell: bash

    - name: Commit squashed changes
      id: commit-changes
      if: ${{ env.STRATEGY == 'squash' }}
      uses: branoholy/update-files-action@main
      with:
        token: ${{ env.INPUT_TOKEN }}
        branch.name: __rebase-${{ fromJson(steps.get-pr-info.outputs.data).node.headRef.name }}
        branch.recreate: true
        commit.paths: '**/*'
        commit.message: ${{ fromJson(steps.get-pr-info.outputs.data).node.title }}

    - name: Reset remote branch
      if: ${{ env.STRATEGY == 'squash' }}
      uses: octokit/graphql-action@v2.3.2
      with:
        token: ${{ env.INPUT_TOKEN }}
        query: |
          mutation ResetPullRequestBranch($id: ID!, $oid: GitObjectID!) {
            updateRef(input: { refId: $id, oid: $oid, force: true }) {
              clientMutationId
            }
          }
        id: ${{ fromJson(steps.get-pr-info.outputs.data).node.headRef.id }}
        oid: ${{ steps.commit-changes.outputs['commit.sha'] }}

    - name: Get id of the temporary rebase branch
      id: get-rebase-branch-info
      if: ${{ env.STRATEGY == 'squash' }}
      uses: octokit/graphql-action@v2.3.2
      with:
        token: ${{ env.INPUT_TOKEN }}
        query: |
          query GetRebaseBranchInfo($owner: String!, $repo: String!, $name: String!) {
            repository(owner: $owner, name: $repo) {
              ref(qualifiedName: $name) {
                id
              }
            }
          }
        owner: ${{ github.event.repository.owner.login }}
        repo: ${{ github.event.repository.name }}
        name: refs/heads/__rebase-${{ fromJson(steps.get-pr-info.outputs.data).node.headRef.name }}

    - name: Delete temporary rebase branch
      if: ${{ env.STRATEGY == 'squash' }}
      uses: octokit/graphql-action@v2.3.2
      with:
        token: ${{ env.INPUT_TOKEN }}
        query: |
          mutation DeleteRebaseBranch($id: ID!) {
            deleteRef(input: { refId: $id }) {
              clientMutationId
            }
          }
        id: ${{ fromJson(steps.get-rebase-branch-info.outputs.data).repository.ref.id }}
