name: Create release (main)

on:
  pull_request:
    types: [closed]
    branches: [main]

permissions:
  contents: write

jobs:
  prepare-release-info:
    name: Prepare release info
    runs-on: ubuntu-latest
    if: github.head_ref == 'release' && github.event.pull_request.merged == true
    outputs:
      package-paths: ${{ steps.released-packages.outputs.package-paths }}

    steps:
      - name: Install
        uses: cluerise/actions/install@main
        with:
          fetch-depth: 2

      - name: Find all released packages
        id: released-packages
        run: |
          {
            echo "package-paths<<EOF_PACKAGE_PATHS"
            git diff --name-only HEAD^ | grep package.json | xargs -I{} dirname {} | jq -R -s -c 'split("\n")[:-1] | sort | reverse'
            echo "EOF_PACKAGE_PATHS"
          } >> $GITHUB_OUTPUT;

  create-releases:
    name: Create release
    runs-on: ubuntu-latest
    needs: prepare-release-info
    if: needs.prepare-release-info.outputs.package-paths != '[]'
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        package-path: ${{ fromJson(needs.prepare-release-info.outputs.package-paths) }}

    steps:
      - name: Get bot token
        id: get-bot-token
        uses: cluerise/actions/get-github-app-token@main
        with:
          app-id: ${{ vars.CLUERISE_PUBLIC_BOT_APP_ID }}
          app-private-key: ${{ secrets.CLUERISE_PUBLIC_BOT_APP_PRIVATE_KEY }}

      - name: Install
        uses: cluerise/actions/install@main

      - name: Get release info
        id: get-release-info
        run: pnpm run release info
        working-directory: ${{ matrix.package-path }}

      - name: Get single repo release title
        run: echo "RELEASE_TITLE=Release ${{ fromJson(steps.get-release-info.outputs.info).tag }}" >> $GITHUB_ENV

      - name: Get id of the repository and latest branch
        id: get-latest-ref
        uses: octokit/graphql-action@v2.3.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          query: |
            query GetRef($owner: String!, $repo: String!, $name: String!) {
              repository(owner: $owner, name: $repo) {
                id
                ref(qualifiedName: $name) {
                  id
                }
              }
            }
          owner: ${{ github.event.repository.owner.login }}
          repo: ${{ github.event.repository.name }}
          name: ${{ toJson(fromJson(steps.get-release-info.outputs.info).latestBranch) }}

      - name: Create the latest branch
        if: fromJson(steps.get-latest-ref.outputs.data).repository.ref == null
        uses: octokit/graphql-action@v2.3.2
        with:
          token: ${{ steps.get-bot-token.outputs.token }}
          query: |
            mutation CreateRef($id: ID!, $name: String!, $oid: GitObjectID!) {
              createRef(input: { repositoryId: $id, name: $name, oid: $oid }) {
                clientMutationId
              }
            }
          id: ${{ fromJson(steps.get-latest-ref.outputs.data).repository.id }}
          name: refs/heads/${{ fromJson(steps.get-release-info.outputs.info).latestBranch }}
          oid: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Reset the latest branch
        if: fromJson(steps.get-latest-ref.outputs.data).repository.ref != null
        uses: octokit/graphql-action@v2.3.2
        with:
          token: ${{ steps.get-bot-token.outputs.token }}
          query: |
            mutation UpdateRef($id: ID!, $oid: GitObjectID!) {
              updateRef(input: { refId: $id, oid: $oid }) {
                clientMutationId
              }
            }
          id: ${{ fromJson(steps.get-latest-ref.outputs.data).repository.ref.id }}
          oid: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Create a new GitHub release
        uses: octokit/request-action@dad4362715b7fb2ddedf9772c8670824af564f0d
        with:
          route: POST /repos/{owner}/{repo}/releases
          owner: ${{ github.event.repository.owner.login }}
          repo: ${{ github.event.repository.name }}
          tag_name: ${{ toJson(fromJson(steps.get-release-info.outputs.info).tag) }}
          target_commitish: ${{ github.event.pull_request.merge_commit_sha }}
          name: ${{ toJson(env.RELEASE_TITLE) }}
          body: ${{ toJson(fromJson(steps.get-release-info.outputs.info).changelog) }}
          GITHUB_TOKEN: ${{ steps.get-bot-token.outputs.token }}
