name: Create release

on:
  workflow_call:
    inputs:
      app-id:
        type: string
        description: GitHub app ID
        required: false
      manager:
        type: string
        description: Package manager (pnpm, npm, or yarn)
      extract-changelog-command:
        type: string
        description: Extract changelog command to run
    secrets:
      token:
        description: GitHub access token
        required: false
      app-private-key:
        description: GitHub app private key
        required: false

jobs:
  create-release:
    name: Create release
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'release-') && github.event.pull_request.merged == true
    env:
      INPUT_APP_ID: ${{ inputs.app-id }}
      INPUT_MANAGER: ${{ inputs.manager }}
      INPUT_EXTRACT_CHANGELOG_COMMAND: ${{ inputs.extract-changelog-command || 'pnpm run release extract-changelog' }}
      SECRET_TOKEN: ${{ secrets.token }}
      SECRET_APP_PRIVATE_KEY: ${{ secrets.app-private-key }}

    steps:
      - name: Check required secrets
        if: env.SECRET_TOKEN == null && (env.INPUT_APP_ID == null || env.SECRET_APP_PRIVATE_KEY == null)
        run: exit 1

      - name: Get bot token
        id: get-bot-token
        if: env.SECRET_TOKEN == null
        uses: cluerise/actions/get-github-app-token@v4.1.1
        with:
          app-id: ${{ env.INPUT_APP_ID }}
          app-private-key: ${{ env.SECRET_APP_PRIVATE_KEY }}

      - name: Set the release version env
        run: echo "RELEASE_VERSION=$(echo '${{ github.head_ref }}' | cut -d'-' -f 2)" >> $GITHUB_ENV

      - name: Get id of the repository and latest branch
        id: get-latest-ref
        uses: octokit/graphql-action@v2.3.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          query: |
            query GetRef($owner: String!, $repo: String!, $name: String!) {
              repository(owner: $owner, name: $repo) {
                id
                ref(qualifiedName: $name) {
                  id
                }
              }
            }
          owner: ${{ github.event.repository.owner.login }}
          repo: ${{ github.event.repository.name }}
          name: latest

      - name: Create the latest branch
        if: fromJson(steps.get-latest-ref.outputs.data).repository.ref == null
        uses: octokit/graphql-action@v2.3.2
        with:
          token: ${{ env.SECRET_TOKEN || steps.get-bot-token.outputs.token }}
          query: |
            mutation CreateRef($id: ID!, $name: String!, $oid: GitObjectID!) {
              createRef(input: {repositoryId: $id, name: $name, oid: $oid}) {
                clientMutationId
              }
            }
          id: ${{ fromJson(steps.get-latest-ref.outputs.data).repository.id }}
          name: refs/heads/latest
          oid: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Reset the latest branch
        if: fromJson(steps.get-latest-ref.outputs.data).repository.ref != null
        uses: octokit/graphql-action@v2.3.2
        with:
          token: ${{ env.SECRET_TOKEN || steps.get-bot-token.outputs.token }}
          query: |
            mutation UpdateRef($id: ID!, $oid: GitObjectID!) {
              updateRef(input: {refId: $id, oid: $oid}) {
                clientMutationId
              }
            }
          id: ${{ fromJson(steps.get-latest-ref.outputs.data).repository.ref.id }}
          oid: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Install
        uses: cluerise/actions/install@v4.1.1
        with:
          manager: ${{ env.INPUT_MANAGER }}

      - name: Extract the changelog
        id: extract-changelog
        run: ${{ env.INPUT_EXTRACT_CHANGELOG_COMMAND }}

      - name: Create a new GitHub release
        uses: octokit/request-action@dad4362715b7fb2ddedf9772c8670824af564f0d
        with:
          route: POST /repos/{owner}/{repo}/releases
          owner: ${{ github.event.repository.owner.login }}
          repo: ${{ github.event.repository.name }}
          tag_name: v${{ env.RELEASE_VERSION }}
          target_commitish: ${{ github.event.pull_request.merge_commit_sha }}
          name: Version ${{ env.RELEASE_VERSION }}
          body: ${{ toJSON(steps.extract-changelog.outputs.changelog) }}
          GITHUB_TOKEN: ${{ env.SECRET_TOKEN || steps.get-bot-token.outputs.token }}
