name: Create release

on:
  workflow_call:
    inputs:
      app-id:
        type: string
        description: GitHub app ID
      manager:
        type: string
        description: Package manager (pnpm, npm, or yarn)
      release-info-command:
        type: string
        description: Release info command to run
      repository-type:
        type: string
        description: Type of the repository (single or monorepo)
      npm-config-userconfig:
        type: string
        description: NPM configuration file path
    secrets:
      token:
        description: GitHub access token
        required: false
      app-private-key:
        description: GitHub app private key
        required: false
      npm-auth-token:
        description: NPM authentication token for private packages
        required: false

env:
  INPUT_APP_ID: ${{ inputs.app-id }}
  INPUT_MANAGER: ${{ inputs.manager }}
  INPUT_RELEASE_INFO_COMMAND: ${{ inputs.release-info-command || 'pnpm run release info' }}
  INPUT_REPOSITORY_TYPE: ${{ inputs.repository-type || 'single' }}
  SECRET_TOKEN: ${{ secrets.token }}
  SECRET_APP_PRIVATE_KEY: ${{ secrets.app-private-key }}
  NPM_AUTH_TOKEN: ${{ secrets.npm-auth-token }}
  NPM_CONFIG_USERCONFIG: ${{ inputs.npm-config-userconfig }}

permissions:
  contents: write

jobs:
  prepare-release-info:
    name: Prepare release info
    runs-on: ubuntu-latest
    if: github.head_ref == 'release' && github.event.pull_request.merged == true
    outputs:
      package-paths: ${{ steps.released-packages.outputs.package-paths }}

    steps:
      - name: Check required secrets
        if: env.SECRET_TOKEN == '' && (env.INPUT_APP_ID == '' || env.SECRET_APP_PRIVATE_KEY == '')
        run: exit 1

      - name: Install
        uses: cluerise/actions/install@v6.0.0
        with:
          manager: ${{ env.INPUT_MANAGER }}
          fetch-depth: 2

      - name: Find all released packages
        id: released-packages
        run: |
          {
            echo "package-paths<<EOF_PACKAGE_PATHS"
            git diff --name-only HEAD^ | grep package.json | xargs -I{} dirname {} | jq -R -s -c 'split("\n")[:-1] | sort | reverse'
            echo "EOF_PACKAGE_PATHS"
          } >> $GITHUB_OUTPUT;

  create-releases:
    name: Create release
    runs-on: ubuntu-latest
    needs: prepare-release-info
    if: needs.prepare-release-info.outputs.package-paths != '[]'
    strategy:
      max-parallel: 1
      matrix:
        package-path: ${{ fromJson(needs.prepare-release-info.outputs.package-paths) }}

    steps:
      - name: Get bot token
        id: get-bot-token
        if: env.SECRET_TOKEN == ''
        uses: cluerise/actions/get-github-app-token@v6.0.0
        with:
          app-id: ${{ env.INPUT_APP_ID }}
          app-private-key: ${{ env.SECRET_APP_PRIVATE_KEY }}

      - name: Install
        uses: cluerise/actions/install@v6.0.0
        with:
          manager: ${{ env.INPUT_MANAGER }}

      - name: Get release info
        id: get-release-info
        run: ${{ env.INPUT_RELEASE_INFO_COMMAND }}
        working-directory: ${{ matrix.package-path }}

      - name: Get single repo release title
        if: env.INPUT_REPOSITORY_TYPE == 'single'
        run: echo "RELEASE_TITLE=Release ${{ fromJson(steps.get-release-info.outputs.info).tag }}" >> $GITHUB_ENV

      - name: Get monorepo release title
        if: env.INPUT_REPOSITORY_TYPE == 'monorepo'
        run: echo "RELEASE_TITLE=${{ fromJson(steps.get-release-info.outputs.info).tag }}" >> $GITHUB_ENV

      - name: Get id of the repository and latest branch
        id: get-latest-ref
        uses: octokit/graphql-action@v2.3.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          query: |
            query GetRef($owner: String!, $repo: String!, $name: String!) {
              repository(owner: $owner, name: $repo) {
                id
                ref(qualifiedName: $name) {
                  id
                }
              }
            }
          owner: ${{ github.event.repository.owner.login }}
          repo: ${{ github.event.repository.name }}
          name: ${{ toJson(fromJson(steps.get-release-info.outputs.info).latestBranch) }}

      - name: Create the latest branch
        if: fromJson(steps.get-latest-ref.outputs.data).repository.ref == null
        uses: octokit/graphql-action@v2.3.2
        with:
          token: ${{ env.SECRET_TOKEN || steps.get-bot-token.outputs.token }}
          query: |
            mutation CreateRef($id: ID!, $name: String!, $oid: GitObjectID!) {
              createRef(input: { repositoryId: $id, name: $name, oid: $oid }) {
                clientMutationId
              }
            }
          id: ${{ fromJson(steps.get-latest-ref.outputs.data).repository.id }}
          name: refs/heads/${{ fromJson(steps.get-release-info.outputs.info).latestBranch }}
          oid: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Reset the latest branch
        if: fromJson(steps.get-latest-ref.outputs.data).repository.ref != null
        uses: octokit/graphql-action@v2.3.2
        with:
          token: ${{ env.SECRET_TOKEN || steps.get-bot-token.outputs.token }}
          query: |
            mutation UpdateRef($id: ID!, $oid: GitObjectID!) {
              updateRef(input: { refId: $id, oid: $oid }) {
                clientMutationId
              }
            }
          id: ${{ fromJson(steps.get-latest-ref.outputs.data).repository.ref.id }}
          oid: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Create a new GitHub release
        uses: octokit/request-action@dad4362715b7fb2ddedf9772c8670824af564f0d
        with:
          route: POST /repos/{owner}/{repo}/releases
          owner: ${{ github.event.repository.owner.login }}
          repo: ${{ github.event.repository.name }}
          tag_name: ${{ toJson(fromJson(steps.get-release-info.outputs.info).tag) }}
          target_commitish: ${{ github.event.pull_request.merge_commit_sha }}
          name: ${{ toJson(env.RELEASE_TITLE) }}
          body: ${{ toJson(fromJson(steps.get-release-info.outputs.info).changelog) }}
          GITHUB_TOKEN: ${{ env.SECRET_TOKEN || steps.get-bot-token.outputs.token }}
