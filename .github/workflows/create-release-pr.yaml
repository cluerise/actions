name: Create release PR

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      app-id:
        type: string
        description: GitHub app ID
        required: false
      manager:
        type: string
        description: Package manager (pnpm, npm, or yarn)
      release-command:
        type: string
        description: Release command to run
      __external-call:
        type: boolean
        description: Do not use this input, it is an internal value to identify the workflow_call event
        default: true
    secrets:
      token:
        description: GitHub access token
        required: false
      app-private-key:
        description: GitHub app private key
        required: false

jobs:
  create-release-pr:
    name: Create release PR
    runs-on: ubuntu-latest
    env:
      INPUT_APP_ID: ${{ inputs.app-id || vars.CLUERISE_PUBLIC_BOT_APP_ID }}
      INPUT_MANAGER: ${{ inputs.manager }}
      INPUT_RELEASE_COMMAND: ${{ inputs.release-command || 'pnpm run release create' }}
      INPUT_EXTERNAL_CALL: ${{ inputs.__external-call || false }}
      SECRET_TOKEN: ${{ secrets.token }}
      SECRET_APP_PRIVATE_KEY: ${{ secrets.app-private-key || secrets.CLUERISE_PUBLIC_BOT_APP_PRIVATE_KEY }}

    steps:
      - name: Check required secrets
        if: env.SECRET_TOKEN == null && (env.INPUT_APP_ID == null || env.SECRET_APP_PRIVATE_KEY == null)
        run: exit 1

      - name: Get bot token (main)
        id: get-bot-token-main
        if: env.INPUT_EXTERNAL_CALL == 'false' && env.SECRET_TOKEN == null
        uses: cluerise/actions/get-github-app-token@main
        with:
          app-id: ${{ env.INPUT_APP_ID }}
          app-private-key: ${{ env.SECRET_APP_PRIVATE_KEY }}

      - name: Get bot token (version)
        id: get-bot-token-version
        if: env.INPUT_EXTERNAL_CALL == 'true' && env.SECRET_TOKEN == null
        uses: cluerise/actions/get-github-app-token@v4.0.1
        with:
          app-id: ${{ env.INPUT_APP_ID }}
          app-private-key: ${{ env.SECRET_APP_PRIVATE_KEY }}

      - name: Set bot token
        run: echo "BOT_TOKEN=${{ steps.get-bot-token-main.outputs.token || steps.get-bot-token-version.outputs.token }}" >> $GITHUB_ENV

      - name: Install (main)
        if: env.INPUT_EXTERNAL_CALL == 'false'
        uses: cluerise/actions/install@main
        with:
          fetch-depth: 0

      - name: Install (version)
        if: env.INPUT_EXTERNAL_CALL == 'true'
        uses: cluerise/actions/install@v4.0.1
        with:
          manager: ${{ env.INPUT_MANAGER }}
          fetch-depth: 0

      - name: Run the release script
        id: release
        run: ${{ env.INPUT_RELEASE_COMMAND }}

      - name: Create a pull request with the release (main)
        if: env.INPUT_EXTERNAL_CALL == 'false'
        uses: branoholy/update-files-action@main
        with:
          token: ${{ env.BOT_TOKEN }}
          branch.name: release-${{ steps.release.outputs.version }}
          branch.recreate: true
          commit.paths: |
            package.json
            pnpm-lock.yaml
            package-lock.json
            yarn.lock
            CHANGELOG.md
            .github/workflows/*.yaml
          commit.message: 'release: Version ${{ steps.release.outputs.version }}'
          commit.token: ${{ env.BOT_TOKEN }}
          pull-request.body: Release ${{ steps.release.outputs.version }}.
          pull-request.labels: 'type: release'

      - name: Create a pull request with the release (version)
        if: env.INPUT_EXTERNAL_CALL == 'true'
        uses: branoholy/update-files-action@main
        with:
          token: ${{ env.SECRET_TOKEN || env.BOT_TOKEN }}
          branch.name: release-${{ steps.release.outputs.version }}
          branch.recreate: true
          commit.paths: |
            package.json
            pnpm-lock.yaml
            package-lock.json
            yarn.lock
            CHANGELOG.md
            **/*.pbxproj
          commit.message: 'release: Version ${{ steps.release.outputs.version }}'
          commit.token: ${{ env.BOT_TOKEN || secrets.GITHUB_TOKEN }}
          pull-request.body: Release ${{ steps.release.outputs.version }}.
          pull-request.labels: 'type: release'
