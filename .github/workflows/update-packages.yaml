name: Update packages

on:
  schedule:
    - cron: '0 11 * * 0'
  workflow_dispatch:
    inputs:
      max-pull-requests:
        type: number
        description: Max pull requests
  workflow_call:
    inputs:
      app-id:
        type: string
        description: GitHub app ID
      max-pull-requests:
        type: number
        description: Max pull requests
      package-groups:
        type: string
        description: JSON object defining package groups for updates
      npm-config-userconfig:
        type: string
        description: NPM configuration file path
      __external-call:
        type: boolean
        description: Do not use this input, it is an internal value to identify the workflow_call event
        default: true
    secrets:
      token:
        description: GitHub access token
        required: false
      app-private-key:
        description: GitHub app private key
        required: false
      npm-auth-token:
        description: NPM authentication token for private packages
        required: false

env:
  INPUT_APP_ID: ${{ inputs.app-id || vars.CLUERISE_PUBLIC_BOT_APP_ID }}
  INPUT_MAX_PULL_REQUESTS: ${{ fromJSON(inputs.max-pull-requests || '3') }}
  INPUT_PACKAGE_GROUPS: ${{ inputs.package-groups || '{}' }}
  INPUT_EXTERNAL_CALL: ${{ inputs.__external-call || false }}
  SECRET_TOKEN: ${{ secrets.token }}
  SECRET_APP_PRIVATE_KEY: ${{ secrets.app-private-key || secrets.CLUERISE_PUBLIC_BOT_APP_PRIVATE_KEY }}
  NPM_AUTH_TOKEN: ${{ secrets.npm-auth-token }}
  NPM_CONFIG_USERCONFIG: ${{ inputs.npm-config-userconfig }}

jobs:
  prepare-updates:
    name: Prepare updates
    runs-on: ubuntu-latest
    outputs:
      updates: ${{ steps.prepare-updates.outputs.updates }}

    steps:
      - name: Check required secrets
        if: env.SECRET_TOKEN == '' && (env.INPUT_APP_ID == '' || env.SECRET_APP_PRIVATE_KEY == '')
        run: exit 1

      - name: Install (main)
        if: env.INPUT_EXTERNAL_CALL == 'false'
        uses: cluerise/actions/install@main

      - name: Install (version)
        if: env.INPUT_EXTERNAL_CALL == 'true'
        uses: cluerise/actions/install@v5.2.0

      - name: Get outdated packages
        id: get-outdated-packages
        run: |
          {
            echo "outdated-packages<<EOF_OUTDATED_PACKAGES"
            pnpm outdated --recursive --json || true
            echo "EOF_OUTDATED_PACKAGES"
          } >> $GITHUB_OUTPUT;

      - name: Prepare updates
        id: prepare-updates
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const groupPackages = (packages, groups) => {
              const groupedPackages = {};
              const groupedPackageNames = new Set();

              for (const groupName in groups) {
                const group = groups[groupName].reduce(
                  (acc, packageName) => {
                    if (packages[packageName]) {
                      acc[packageName] = packages[packageName];
                      groupedPackageNames.add(packageName);
                    }

                    return acc;
                  },
                  {}
                );

                if (Object.keys(group).length > 0) {
                  groupedPackages[groupName] = group;
                }
              }

              const ungroupedPackages = {};
              for (const packageName in packages) {
                if (!groupedPackageNames.has(packageName)) {
                  ungroupedPackages[packageName] = packages[packageName];
                }
              }

              return {
                groupedPackages,
                ungroupedPackages,
              };
            };

            const maxPullRequests = parseInt(core.getInput('max-pull-requests', { required: true }), 10);
            const outdatedPackages = JSON.parse(core.getInput('outdated-packages', { required: true }));
            const packageGroups = JSON.parse(core.getInput('package-groups', { required: true }));

            const { groupedPackages, ungroupedPackages } = groupPackages(outdatedPackages, packageGroups);

            const groupedUpdates = Object.entries(groupedPackages).map(([groupName, packages]) => {
              const prodScope = Object.values(packages).some(package => package.dependencyType === 'dependencies');
              const devScope = Object.values(packages).some(package => package.dependencyType === 'devDependencies');

              const scope = prodScope ? 'prod' : devScope ? 'dev' : '';
              const scopeName = scope ? `(${scope})` : '';
              const scopeBranchName = scope ? `-${scope}` : '';

              const packagesBody = Object.entries(packages)
                .map(([packageName, package]) => `- \`${packageName}\`: ${package.current} to ${package.latest}`)
                .join('\n');

              const body = `Automatic update of ${groupName} packages:\n\n${packagesBody}`

              return {
                title: `deps${scopeName}: Update ${groupName} packages`,
                body,
                branchName: `deps${scopeBranchName}-${groupName}`,
                versionedPackageNames: Object.keys(packages).map(packageName => `${packageName}@${packages[packageName].latest}`),
                labels: ['type: deps', `scope: ${scope}`].join('\n')
              };
            });

            const ungroupedUpdates = Object.entries(ungroupedPackages).map(([packageName, package]) => {
              const scope = package.dependencyType === 'dependencies' ? 'prod' : package.dependencyType === 'devDependencies' ? 'dev' : '';
              const scopeName = scope ? `(${scope})` : '';
              const scopeBranchName = scope ? `-${scope}` : '';

              const body = `Automatic update of ${packageName} from ${package.current} to ${package.latest}.`;

              return {
                title: `deps${scopeName}: Update ${packageName} ${package.current} to ${package.latest}`,
                body,
                branchName: `deps${scopeBranchName}-${packageName}`,
                versionedPackageNames: [`${packageName}@${package.latest}`],
                labels: ['type: deps', `scope: ${scope}`].join('\n')
              };
            });

            const updates = [...groupedUpdates, ...ungroupedUpdates].slice(0, maxPullRequests);
            core.setOutput('updates', JSON.stringify(updates));

          max-pull-requests: ${{ env.INPUT_MAX_PULL_REQUESTS }}
          package-groups: ${{ env.INPUT_PACKAGE_GROUPS }}
          outdated-packages: ${{ steps.get-outdated-packages.outputs.outdated-packages }}

  create-pull-requests:
    name: Create pull request
    runs-on: ubuntu-latest
    needs: prepare-updates
    if: needs.prepare-updates.outputs.updates != '[]'
    strategy:
      matrix:
        update: ${{ fromJson(needs.prepare-updates.outputs.updates) }}

    steps:
      - name: Get bot token (main)
        id: get-bot-token-main
        if: env.INPUT_EXTERNAL_CALL == 'false' && env.SECRET_TOKEN == ''
        uses: cluerise/actions/get-github-app-token@main
        with:
          app-id: ${{ env.INPUT_APP_ID }}
          app-private-key: ${{ env.SECRET_APP_PRIVATE_KEY }}

      - name: Get bot token (version)
        id: get-bot-token-version
        if: env.INPUT_EXTERNAL_CALL == 'true' && env.SECRET_TOKEN == ''
        uses: cluerise/actions/get-github-app-token@v5.2.0
        with:
          app-id: ${{ env.INPUT_APP_ID }}
          app-private-key: ${{ env.SECRET_APP_PRIVATE_KEY }}

      - name: Set bot token
        run: echo "BOT_TOKEN=${{ steps.get-bot-token-main.outputs.token || steps.get-bot-token-version.outputs.token }}" >> $GITHUB_ENV

      - name: Install (main)
        if: env.INPUT_EXTERNAL_CALL == 'false'
        uses: cluerise/actions/install@main

      - name: Install (version)
        if: env.INPUT_EXTERNAL_CALL == 'true'
        uses: cluerise/actions/install@v5.2.0

      - name: Update packages
        run: pnpm update --recursive ${{ join(matrix.update.versionedPackageNames, ' ') }}

      - name: Create a pull request with the updated files
        uses: branoholy/update-files-action@main
        with:
          token: ${{ env.SECRET_TOKEN || env.BOT_TOKEN }}
          branch.name: ${{ matrix.update.branchName }}
          branch.recreate: true
          commit.paths: |
            **/package.json
            pnpm-lock.yaml
          commit.message: ${{ matrix.update.title }}
          commit.token: ${{ env.BOT_TOKEN }}
          pull-request.body: ${{ matrix.update.body }}
          pull-request.labels: ${{ matrix.update.labels }}
